{
    "version": "2.0.0",
    "tasks": [
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                               CLEAN Tasks                                                ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CLEAN: Remove Build Files
            "label": "CLEAN: Remove Build Files",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "rm",
                "args": [
                    "-rf",
                    "bin",
                    "build",
                    "doc",
                    "coverage",
                    "junit.xml",
                ],
            },
            "windows": {
                "command": "Remove-Item",
                "args": [
                    "-Recurse",
                    "bin,",
                    "build,",
                    "doc,",
                    "coverage,",
                    "junit.xml",
                ]
            },
            "presentation": {
                "reveal": "never",
                "echo": false,
                "showReuseMessage": false,
            },
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                               CMAKE Tasks                                                ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CMAKE: Main
            "label": "CMAKE: Main",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "bash",
                "args": [
                    "-c",
                    "export CC=$([[ \"${input:compiler}\" == \"gcc\" ]] && echo gcc || echo clang) && export CXX=$([[ \"${input:compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/${input:buildType} -S. -DCMAKE_BUILD_TYPE=${input:buildType} -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DENABLE_CLANG_TIDY=$(echo \"${input:clangTidy}\" | sed \"s/.*: //\") -DENABLE_CPPCHECK=$(echo \"${input:cppcheck}\" | sed \"s/.*: //\") -DLOG_LEVEL=$(echo \"${input:logLevel}\" | sed \"s/.*: //\")",
                ],
                // "options": {
                //     "env": {
                //         "CC": "/usr/bin/clang",
                //         "CXX": "/usr/bin/clang++",
                //     },
                // },
            },
            "windows": {
                "command": "cmake",
                "args": [
                    "-Bbuild/${input:buildType}",
                    "-S.",
                    "-DCMAKE_BUILD_TYPE=${input:buildType}",
                    "-DENABLE_MAIN=ON",
                    "-DENABLE_TESTING=OFF",
                    "-DENABLE_DOXYGEN=OFF",
                    "-DLOG_LEVEL=DEBUG",
                    "-DENABLE_CLANG_TIDY=OFF",
                    "-DENABLE_CPPCHECK=OFF",
                    "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
                    "-DWARNINGS_AS_ERRORS=OFF",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "presentation": {
                "clear": true,
            },
            "problemMatcher": [],
        },
        { // CMAKE: Testing
            "label": "CMAKE: Testing",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "bash",
                "args": [
                    "-c",
                    "export CC=$([[ \"${input:compiler}\" == \"gcc\" ]] && echo gcc || echo clang) && export CXX=$([[ \"${input:compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/Debug -S. -DCMAKE_BUILD_TYPE=Debug -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DENABLE_DOXYGEN=OFF -DENABLE_CLANG_TIDY=$(echo \"${input:clangTidy}\" | sed \"s/.*: //\") -DENABLE_CPPCHECK=$(echo \"${input:cppcheck}\" | sed \"s/.*: //\") -DLOG_LEVEL=$(echo \"${input:logLevel}\" | sed \"s/.*: //\")",
                ],
                // "options": {
                //     "env": {
                //         "CC": "/usr/bin/clang",
                //         "CXX": "/usr/bin/clang++",
                //     }
                // },
            },
            "windows": {
                "command": "cmake",
                "args": [
                    "-Bbuild/Debug",
                    "-S.",
                    "-DCMAKE_BUILD_TYPE=Debug",
                    "-DENABLE_MAIN=OFF",
                    "-DENABLE_TESTING=ON",
                    "-DENABLE_DOXYGEN=OFF",
                    "-DLOG_LEVEL=TRACE",
                    "-DENABLE_CLANG_TIDY=OFF",
                    "-DENABLE_CPPCHECK=OFF",
                    "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
                    "-DWARNINGS_AS_ERRORS=OFF",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "presentation": {
                "clear": true
            },
            "problemMatcher": [],
        },
        { // CMAKE: Coverage
            "label": "CMAKE: Coverage",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "-Bbuild/Debug-cov",
                "-S.",
                "-DCMAKE_BUILD_TYPE=Debug",
                "-DENABLE_MAIN=OFF",
                "-DENABLE_TESTING=ON",
                "-DENABLE_DOXYGEN=OFF",
                "-DENABLE_COVERAGE=TRUE",
                "-DLOG_LEVEL=TRACE",
                "-DENABLE_CLANG_TIDY=OFF",
                "-DENABLE_CPPCHECK=OFF",
                "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
            ],
            "options": {
                "env": {
                    "CC": "/usr/bin/gcc",
                    "CXX": "/usr/bin/g++",
                }
            },
            "presentation": {
                "clear": true
            },
            "problemMatcher": [],
        },
        { // CMAKE: Documentation
            "label": "CMAKE: Documentation",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "-Bbuild/Release",
                "-S.",
                "-DCMAKE_BUILD_TYPE=Release",
                "-DENABLE_MAIN=OFF",
                "-DENABLE_TESTING=OFF",
                "-DENABLE_DOXYGEN=ON",
                "-DLOG_LEVEL=OFF",
                "-DENABLE_CLANG_TIDY=OFF",
                "-DENABLE_CPPCHECK=OFF",
                "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
            ],
            "presentation": {
                "clear": true
            },
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                          CMAKE Configure Tasks                                           ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CMAKE: Configure
            "label": "CMAKE: Configure",
            "type": "shell",
            "group": "build",
            "command": "ccmake",
            "args": [
                "-Bbuild/${input:buildType}",
                "-S.",
                "-DCMAKE_BUILD_TYPE=${input:buildType}",
            ],
            "options": {
                "env": {
                    "CC": "/usr/bin/clang",
                    "CXX": "/usr/bin/clang++",
                }
            },
            "presentation": {
                "focus": true
            },
            "dependsOn": [
                "CMAKE: Main",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                                Build Tasks                                               ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // MAIN: Build project
            "label": "MAIN: Build project",
            "type": "shell",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "command": "cmake",
            "linux": {
                "args": [
                    "--build",
                    "build/${input:buildType}",
                    "--",
                    "-j",
                ],
            },
            "windows": {
                "args": [
                    "--build",
                    "build/${input:buildType}",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "CMAKE: Main",
            ],
            "problemMatcher": [],
        },
        { // TEST: Build project
            "label": "TEST: Build project",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "cmake",
                "args": [
                    "--build",
                    "build/Debug",
                    "--",
                    "-j",
                ],
            },
            "windows": {
                "command": "cmake",
                "args": [
                    "--build",
                    "build/Debug",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "CMAKE: Testing",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Build Coverage Report
            "label": "COVERAGE: Build Coverage Report",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "--build",
                "build/Debug-cov",
                "--",
                "-j",
            ],
            "dependsOn": [
                "CMAKE: Coverage",
            ],
            "problemMatcher": [],
        },
        { // DOXYGEN: Build Documentation
            "label": "DOXYGEN: Build Documentation",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "--build",
                "build/Release",
                "--target",
                "doxygen-docs",
                "--",
                "-j",
            ],
            "dependsOn": [
                "CMAKE: Documentation",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                                Run Tasks                                                 ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // MAIN: Build & run project
            "label": "MAIN: Build & run project",
            "type": "shell",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "command": "./bin/${input:buildType}/instinct",
            "args": [
                "-f",
                "config.ini",
                "-l",
                "flow/Default.flow",
                // "--nogui",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        },
        { // TEST: Build & run
            "label": "TEST: Build & run",
            "type": "shell",
            "group": "test",
            "command": "ctest",
            "args": [
                "-j2",
                "--output-on-failure",
                // "--verbose",
            ],
            "options": {
                "cwd": "build/Debug",
            },
            "dependsOn": [
                "TEST: Build project",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Run Coverage Tests
            "label": "COVERAGE: Run Coverage Tests",
            "type": "shell",
            "group": "test",
            "command": "ctest",
            "args": [
                "-j2",
                "--output-on-failure",
                // "--verbose",
            ],
            "options": {
                "cwd": "build/Debug-cov",
            },
            "dependsOn": [
                "COVERAGE: Build Coverage Report",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create
            "label": "COVERAGE: Create",
            "type": "shell",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "mkdir -p coverage && lcov --gcov-tool gcov --capture --no-external --directory . --output-file coverage/coverage_all.info && lcov --remove coverage/coverage_all.info \"${workspaceFolder}/lib/*\" \"${workspaceFolder}/test/*\" --output-file coverage/coverage.info && genhtml coverage/coverage.info --output-directory coverage && lcov --list coverage/coverage.info && python3 tools/lcov_cobertura.py coverage/coverage.info --output coverage/cobertura-coverage.xml",
            ],
            "dependsOn": [
                "COVERAGE: Run Coverage Tests",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create & Show
            "label": "COVERAGE: Create & Show",
            "type": "shell",
            "group": "build",
            "command": "xdg-open",
            "args": [
                "coverage/index.html",
            ],
            "dependsOn": [
                "COVERAGE: Create",
            ],
            "problemMatcher": [],
        },
        { // DOXYGEN: Create & Show
            "label": "DOXYGEN: Create & Show",
            "type": "shell",
            "group": "build",
            "command": "xdg-open",
            "args": [
                "doc/html/index.html",
            ],
            "dependsOn": [
                "DOXYGEN: Build Documentation",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                             Debugging Tasks                                              ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // VALGRIND: Run profiler
            "label": "VALGRIND: Run profiler",
            "type": "shell",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "valgrind --callgrind-out-file=bin/${input:buildType}/callgrind.out --tool=callgrind bin/${input:buildType}/instinct -f config.ini --nogui -l flow/Default.flow && kcachegrind bin/${input:buildType}/callgrind.out",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        },
        { // VALGRIND: Memory Leak Check
            "label": "VALGRIND: Memory Leak Check",
            "type": "shell",
            "group": "test",
            "command": "valgrind",
            "args": [
                "--leak-check=yes",
                "bin/${input:buildType}/instinct",
                "-f",
                "config.ini",
                "--nogui",
                "-l",
                "flow/Default.flow",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        }
    ],
    "inputs": [
        { // buildType
            "id": "buildType",
            "type": "command",
            "command": "statusBarParam.get.buildType",
            "args": [
                "Debug",
                "Release",
            ],
        },
        { // compiler
            "id": "compiler",
            "type": "command",
            "command": "statusBarParam.get.compiler",
            "args": [
                "clang",
                "gcc",
            ],
        },
        { // clang-tidy
            "id": "clangTidy",
            "type": "command",
            "command": "statusBarParam.get.clangTidy",
            "args": [
                "clang-tidy: OFF",
                "clang-tidy: ON",
            ],
        },
        { // cppcheck
            "id": "cppcheck",
            "type": "command",
            "command": "statusBarParam.get.cppcheck",
            "args": [
                "cppcheck: OFF",
                "cppcheck: ON",
            ],
        },
        { // logLevel
            "id": "logLevel",
            "type": "command",
            "command": "statusBarParam.get.logLevel",
            "args": [
                "Log Level: DATA",
                "Log Level: TRACE",
                "Log Level: DEBUG",
                "Log Level: INFO",
                "Log Level: WARN",
                "Log Level: ERROR",
                "Log Level: CRITICAL",
                "Log Level: OFF",
            ],
        },
    ],
}