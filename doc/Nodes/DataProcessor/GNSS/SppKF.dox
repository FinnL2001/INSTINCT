// This file is part of INSTINCT, the INS Toolkit for Integrated
// Navigation Concepts and Training by the Institute of Navigation of
// the University of Stuttgart, Germany.
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at https://mozilla.org/MPL/2.0/.

namespace Instinct {
  
  /** \defgroup SppKF Single Point Positioning using Kalman Filtering

<!-- --------------------------------------------------------------------------------------------------------------- -->
\section SppKF-KfAlgorithm Algorithm - Extended Kalman Filter
<!-- --------------------------------------------------------------------------------------------------------------- -->

- Prediction
\fl{equation,eq-SppKF-KfAlgorithm-prediction}
\begin{aligned}
  \hat{\boldsymbol{x}}_{n \mid n-1} &=\boldsymbol{\Phi}_{n-1 \mid n-1} \cdot \hat{\boldsymbol{x}}_{n-1 \mid n-1} \\
  \boldsymbol{P}_{n \mid n-1} &=\boldsymbol{\Phi}_{n-1 \mid n-1} \boldsymbol{P}_{n-1 \mid n-1} \boldsymbol{\Phi}_{n-1 \mid n-1}^{T}+\boldsymbol{Q}
\end{aligned}
\f}
- Kalman Gain
\fl{equation,eq-SppKF-KfAlgorithm-gain}
\boldsymbol{K}_{n}=\boldsymbol{P}_{n \mid n-1} \boldsymbol{H}_{n}^{T}\left(\boldsymbol{H}_{n} \boldsymbol{P}_{n \mid n-1} \boldsymbol{H}_{n}^{T}+\boldsymbol{R}_{n}\right)^{-1}
\f}
- Update
\fl{equation,eq-SppKF-KfAlgorithm-update}
\begin{aligned}
  \hat{\boldsymbol{x}}_{n \mid n}&=\hat{\boldsymbol{x}}_{n \mid n-1}+\boldsymbol{K}_{n}\left(\Delta \boldsymbol{y}_{n}-\boldsymbol{H}_{n} \left(\hat{\boldsymbol{x}}_{n \mid n-1} - \hat{\boldsymbol{x}}_{n-1 \mid n-1}\right)\right) \\
  \boldsymbol{P}_{n \mid n}&=\left(\boldsymbol{I}-\boldsymbol{K}_{n} \boldsymbol{H}_{n}\right) \boldsymbol{P}_{n \mid n-1}
\end{aligned}
\f}

<!-- --------------------------------------------------------------------------------------------------------------- -->
\section SppKF-unknowns Unknowns
<!-- --------------------------------------------------------------------------------------------------------------- -->

Pseudorange and Doppler observations are processed together.

\fl{equation,eq-SppKF-unknowns}
\mathbf{x}^e =
  \begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
    \matrix (m)[matrix of math nodes,left delimiter={[},right delimiter={]},
                nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em] {
      \mathbf{r}^e \\
      \mathbf{v}^e \\
      dt_R \\
      d\dotup{t}_R \\
      dt_{ISB}^{S_2 \rightarrow S_1} \\
      d\dotup{t}_{ISB}^{S_2 \rightarrow S_1} \\
      \vdots \\
      dt_{ISB}^{S_o \rightarrow S_1} \\
      d\dotup{t}_{ISB}^{S_o \rightarrow S_1} \\
    };
    \draw [dash dot] (-0.75,1.9) -- (0.75,1.9);

  \end{tikzpicture}
  =
  \begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
    \matrix (m)[matrix of math nodes,left delimiter={[},right delimiter={]},
                nodes={rectangle,text width=20em,align=center},row sep=0.3em, column sep=0.4em] {
      \text{Position [m]} \\ 
      \text{Velocity [m/s]} \\ 
      \text{Receiver clock error [m]} \\ 
      \text{Receiver clock drift [m/s]} \\
      \text{Inter-system clock error (System 2 to 1) [m]} \\ 
      \text{Inter-system clock drift (System 2 to 1)  [m/s]} \\
      \vdots \\
      \text{Inter-system clock error (System o to 1) [m]} \\ 
      \text{Inter-system clock drift (System o to 1)  [m/s]} \\
    };
    \draw [dash dot] (-3.75,1.9) -- (3.75,1.9);

  \end{tikzpicture}
\f}
  
<!-- --------------------------------------------------------------------------------------------------------------- -->
  \section SppKF-processModel Process Model
<!-- --------------------------------------------------------------------------------------------------------------- -->
<!-- --------------------------------------------------------------------------------------------------------------- -->
\subsection SppKF-processModel-systemModel System Model
<!-- --------------------------------------------------------------------------------------------------------------- -->

\fl{equation,eq-SppKF-processModel-systemModel}
\begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
  \matrix (m)[matrix of math nodes,left delimiter={(},right delimiter={)},nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em] 
  {
    \boldsymbol{v}^e \\
    \boldsymbol{a}^e \\
    d\dotup{t}_R \\
    d\ddotup{t}_R \\
    d\dotup{t}_{ISB}^{S_2 \rightarrow S_1} \\
    d\dotup{t}_{ISB}^{S_2 \rightarrow S_1} \\
    \vdots \\
    d\dotup{t}_{ISB}^{S_o \rightarrow S_1} \\
    d\dotup{t}_{ISB}^{S_o \rightarrow S_1} \\
  };
  \draw[decorate,transform canvas={yshift=.5em},thick] (m-1-1.north west) -- node[above=2pt] {$\boldsymbol{\dot{x}}^e$} (m-1-1.north east);
  \draw [dash dot] (-0.75,1.9) -- (0.75,1.9);

\end{tikzpicture}
=
\begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
  \matrix (m)[matrix of math nodes,left delimiter={(},right delimiter={)},
              nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em]
  {
    \mathbf{0}_3     & \mathbf{I}_3     & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \dots  & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} \\
    \mathbf{0}_3     & \mathbf{0}_3     & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \dots  & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         1        &         0        &         0        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         1        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         0        &         0        \\
    \vdots      &      \vdots      &      \vdots      &      \vdots      &      \vdots      &      \vdots      & \ddots &      \vdots      &      \vdots      \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         0        &         1        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         0        &         0        \\
  };
  \draw[decorate,transform canvas={yshift=.5em},thick] (m-1-1.north west) -- node[above=2pt] {$\mathbf{F}$} (m-1-9.north east);
  \draw [dash dot] (-5.75,1.9) -- (5.75,1.9);
  \draw [dash dot] (-3.2,3.1) -- (-3.2,-3.2);

\end{tikzpicture}
\cdot
\begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
  \matrix (m)[matrix of math nodes,left delimiter={(},right delimiter={)},
              nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em] 
  {
    \mathbf{r}^e \\
    \mathbf{v}^e \\
    dt_R \\
    d\dotup{t}_R \\
    dt_{ISB}^{S_2 \rightarrow S_1} \\
    d\dotup{t}_{ISB}^{S_2 \rightarrow S_1} \\
    \vdots \\
    dt_{ISB}^{S_o \rightarrow S_1} \\
    d\dotup{t}_{ISB}^{S_o \rightarrow S_1} \\
  };
  \draw[decorate,transform canvas={yshift=.5em},thick] (m-1-1.north west) -- node[above=2pt] {$\mathbf{x}^e$} (m-1-1.north east);
  \draw [dash dot] (-0.75,1.9) -- (0.75,1.9);

\end{tikzpicture} 
+
\mathbf{G} \cdot \boldsymbol{w}  
\f}

(\cite Groves2013 Groves, ch. 9.4.2.2, eq. 9.148, p. 415)


<!-- --------------------------------------------------------------------------------------------------------------- -->
\subsection SppKF-processModel-stateTransitionMatrix State transition matrix
<!-- --------------------------------------------------------------------------------------------------------------- -->

Higher order terms are zero, so the exact solution is

\fl{equation,eq-SppKF-processModel-stateTransitionMatrix} 
\mathbf{\Phi} = \text{exp}(\mathbf{F} \tau_s) = \mathbf{I} + \mathbf{F}\tau_s 
\f}

(\cite Groves2013 Groves, ch. 9.4.2.2, eq. 9.150, p. 416)


<!-- --------------------------------------------------------------------------------------------------------------- -->
\subsection SppKF-processModel-processNoise Process noise covariance matrix
<!-- --------------------------------------------------------------------------------------------------------------- -->

<b> Clock modeling </b> 
- Phase drift \f$ \sigma_{c\phi} \f$ (random walk) and Frequency drift \f$ \sigma_{cf} \f$ (integrated random walk)
\fl{equation,eq-SppKF-processModel-processNoise-clock}
S_{c f}^a = \frac{\sigma^2\left(\delta \dot{\rho}_c^a\left(t+\tau_s\right)-\delta \dot{\rho}_c^a(t)\right)}{\tau_s} \quad S_{c \phi}^a = \frac{\sigma^2\left(\delta \rho_c^a\left(t+tau_s\right)-\delta \rho_c^a(t)-\delta \dot{\rho}_c^a(t) \tau_s\right)}{\tau_s}
\f}
- Typical values for a TCXO are \f$ S_{cf} \approx 0.04 \text{ m}^2 \text{s}^{-3} \f$ and \f$ S_{c\phi} \approx 0.01 \text{ m}^2 \text{s}^{-1} \f$

<b> Velocity change due to user motion (Variances) </b> <br>
  \f$
  \mathbf{S}_a^n 
  = 
  \begin{bmatrix}
    S_{aH} & 0 & 0 \\
    0 & S_{aH} & 0 \\
    0 & 0 & S_{aV} \\
  \end{bmatrix}
  \f$

\fl{equation,eq-SppKF-processModel-processNoise-userMotion}
\begin{aligned}
& S_{a H}=\frac{\sigma^2\left(v_{e b, N}^n\left(t+\tau_s\right)-v_{e b, N}^n(t)\right)}{\tau_s}=\frac{\sigma^2\left(v_{e b, E}^n\left(t+\tau_s\right)-v_{e b, E}^n(t)\right)}{\tau_s} \\
& S_{a V}=\frac{\sigma^2\left(v_{e b, D}^n\left(t+\tau_s\right)-v_{e b, D}^n(t)\right)}{\tau_s}
\end{aligned}
\f}
 
- Suitable values for \f$ S_{aH} \f$ are around
  - \f$ 1 \text{ m}^2 \text{s}^{â€“3} \f$ for a pedestrian or ship,
  - \f$ 10 \text{ m}^2 \text{s}^{â€“3} \f$ for a car, 
  - \f$ 100 \text{ m}^2 \text{s}^{â€“3} \f$ for a military aircraft.
- The vertical acceleration PSD \f$ S_{aV} \f$  is usually smaller
  
(\cite Groves2013 Groves, ch. 9.4.2.2, p. 416-418)

<!-- --------------------------------------------------------------------------------------------------------------- -->

\subsubsection SppKF-processModel-processNoise-vanLoan Van Loan method

<b> Noise input matrix </b>

\fl{equation,eq-SppKF-processModel-processNoise-vanLoan-noiseInput}
\mathbf{G}
=
\begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
  \matrix (m)[matrix of math nodes,left delimiter={[},right delimiter={]},
              nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em]
  {
    \mathbf{0}_3     & \mathbf{0}_3     & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \dots  & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} \\
    \mathbf{0}_3     & \mathbf{C}_n^e   & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} & \dots  & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         1        &         0        &         0        &         0        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         1        &         0        &         0        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         1        &         0        & \dots  &         0        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         1        & \dots  &         0        &         0        \\
         \vdots      &      \vdots      &      \vdots      &      \vdots      &      \vdots      &      \vdots      & \ddots &      \vdots      &      \vdots      \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         1        &         0        \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3} &         0        &         0        &         0        &         0        & \dots  &         0        &         1        \\
  };
  \draw [dash dot] (-5.75,1.8) -- (5.75,1.8);
  \draw [dash dot] (-3.2,3.1) -- (-3.2,-3.1);

\end{tikzpicture}
\f}

<b> Noise scale matrix </b>

\fl{equation,eq-SppKF-processModel-processNoise-vanLoan-noiseScale}
\mathbf{W}
=
\begin{tikzpicture}[baseline=-\the\dimexpr\fontdimen22\textfont2\relax,decoration=brace]
  \matrix (m)[matrix of math nodes,left delimiter={[},right delimiter={]},
              nodes={rectangle,text width=2.5em,align=center},row sep=0.3em, column sep=0.4em]
  {
    \mathbf{0}_3     & \mathbf{0}_3       & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} &               \mathbf{0}_{3,1}              &             \mathbf{0}_{3,1}             & \dots  &               \mathbf{0}_{3,1}              &              \mathbf{0}_{3,1}            \\
    \mathbf{0}_3     & \mathbf{S}_{a}^{n} & \mathbf{0}_{3,1} & \mathbf{0}_{3,1} &               \mathbf{0}_{3,1}              &             \mathbf{0}_{3,1}             & \dots  &               \mathbf{0}_{3,1}              &              \mathbf{0}_{3,1}            \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   & \sigma_{c\phi}^2 &         0        &                       0                     &                     0                    & \dots  &                       0                     &                      0                   \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   &         0        &   \sigma_{cf}^2  &                       0                     &                     0                    & \dots  &                       0                     &                      0                   \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   &         0        &         0        & {\sigma_{ISB,\phi}^{S_2 \rightarrow S_1}}^2 &                     0                    & \dots  &                       0                     &                      0                   \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   &         0        &         0        &                       0                     & {\sigma_{ISB,f}^{S_2 \rightarrow S_1}}^2 & \dots  &                       0                     &                      0                   \\
         \vdots      &      \vdots        &      \vdots      &      \vdots      &                    \vdots                   &                  \vdots                  & \ddots &                    \vdots                   &                   \vdots                 \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   &         0        &         0        &                       0                     &                     0                    & \dots  & {\sigma_{ISB,\phi}^{S_o \rightarrow S_1}}^2 &                      0                   \\
    \mathbf{0}_{1,3} & \mathbf{0}_{1,3}   &         0        &         0        &                       0                     &                     0                    & \dots  &                       0                     & {\sigma_{ISB,f}^{S_o \rightarrow S_1}}^2 \\
  };
  \draw [dash dot] (-5.75,2.25) -- (5.75,2.25);
  \draw [dash dot] (-3.2,3.65) -- (-3.2,-3.65);

\end{tikzpicture}
\f}

<b> Van Loan algorithm </b>

1. Form a \f$ 2n \times 2n \f$ matrix called \f$ \mathbf{A} \f$ (\f$ n \f$ is the dimension of \f$ \mathbf{x} \f$ and \f$ \mathbf{W} \f$ is the power spectral density of the noise \f$ W(t) \f$)
\fl{equation,ep-SppKF-processNoise-vanLoan-A}
  \mathbf{A} = \begin{bmatrix} -\mathbf{F} & \mathbf{G} \mathbf{W} \mathbf{G}^T \\
                                \mathbf{0} &            \mathbf{F}^T          \end{bmatrix} \Delta t
\f}

2. Calculate the exponential of \f$ \mathbf{A} \f$
\fl{equation,eq-SppKF-processNoise-vanLoan-expA}
\mathbf{B} = \text{expm}(\mathbf{A})
= \left[ \begin{array}{c:c}
    \dots      & \mathbf{\Phi}^{-1} \mathbf{Q} \\[2mm]
    \hdashline
    \mathbf{0} & \mathbf{\Phi}^T              
  \end{array} \right]
= \left[ \begin{array}{c:c}
	\mathbf{B}_{11} & \mathbf{B}_{12} \\[2mm]
    \hdashline
    \mathbf{B}_{21} & \mathbf{B}_{22}
  \end{array} \right]
\f}

3. Calculate the state transition matrix \f$ \mathbf{\Phi} \f$ as
\fl{equation,eq-SppKF-processNoise-vanLoan-Phi}
  \mathbf{\Phi} = \mathbf{B}_{22}^T
\f}

4. Calculate the process noise covariance matrix \f$ \mathbf{Q} \f$ as
\fl{equation,eq-SppKF-processNoise-vanLoan-Q}
  \mathbf{Q} = \mathbf{\Phi} \mathbf{B}_{12}
\f}

Uses GUI input values for \f$ S_{aH} \f$, \f$ S_{cf} \f$ and \f$ S_{c\phi} \f$.

<!-- --------------------------------------------------------------------------------------------------------------- -->

\subsubsection SppKF-processModel-processNoise-groves Groves 

\fl{equation,eq-SppKF-processModel-processNoise-groves}
\mathbf{Q} = 
\left[\begin{array}{cc:cc}
  \frac{1}{3} S_a^\gamma \tau_s^3 & \frac{1}{2} S_a^\gamma \tau_s^2 & 0_{3,1} & 0_{3,1} \\
  \frac{1}{2} S_a^\gamma \tau_s^2 & S_a^\gamma \tau_s & 0_{3,1} & 0_{3,1} \\
  \hdashline
  0_{1,3} & 0_{1,3} & S_{c \phi}^a \tau_s+\frac{1}{3} S_{c f}^a \tau_s^3 & \frac{1}{2} S_{c f}^a \tau_s^2 \\
  0_{1,3} & 0_{1,3} & \frac{1}{2} S_{c f}^a \tau_s^2 & S_{c f}^a \tau_s
  \end{array}\right]
\f}

Uses calculated values for \f$ S_{aH} \f$, \f$ S_{cf} \f$ and \f$ S_{c\phi} \f$.

(\cite Groves2013 Groves, ch. 9.4.2.2, eq. 9.152, p. 417-418)

The inter-system errors and drifts are assumed constant. Note: Groves does not estimate an inter-system drift (\cite Groves2013 Groves, Appendix G.8, p. G-23 - G-24), but we do for all models.


<!-- --------------------------------------------------------------------------------------------------------------- -->
\section SppKF-measurmentModel Measurement Model
<!-- --------------------------------------------------------------------------------------------------------------- -->

\subsection SppKF-measurmentModel-innovation Measurement innovation
See \ref SppBasics-measurementModel-innovation


\subsection SppKF-measurmentModel-sensitivityMatrix Measurement sensitivity matrix
See \ref SppBasics-measurementModel-sensitivityMatrix

In detail for Kalman Filtering
\fl{equation,eq-SppKF-measurementModel-sensitivityMatrix}
\begin{aligned}
\mathbf{H}_k 
&=
\left[\begin{array}{cccccccccc}
  \frac{-x^s+x_r}{\rho_s^s} & \frac{-y^s+y_r}{\rho_s^s} & \frac{-z^s+z_r}{\rho_r^s} & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  \frac{-x^s+x_r}{\rho_r^s} & \frac{-y^s+y_r}{\rho_r^s} & \frac{-z^s+z_r}{\rho_r^s} & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots \\
  \hdashline
  -\frac{\mathbf{v}_x^s-\mathbf{v}_{r, x}}{\rho_r^s} & -\frac{\mathbf{v}_y^s-\mathbf{v}_{r, y}}{\rho_r^s} & -\frac{\mathbf{v}_z^s-\mathbf{v}_{r, z}}{\rho_r^s} & -\frac{x^s-x_r}{\rho_r^s} & -\frac{y^s-y_r}{\rho_r^s} & -\frac{z^s-z_r}{\rho_r^s} & 0 & 1 & 0 & 0 \\
  -\frac{\mathbf{v}_x^s-\mathbf{v}_{r, x}^s}{\rho_r^s} & -\frac{\mathbf{v}_y^s-\mathbf{v}_{r, y}^s}{\rho_r^s} & -\frac{\mathbf{v}_z^s-\mathbf{v}_{r_r}^s}{\rho_r^s} & -\frac{x^s-x_r}{\rho_r^s} & -\frac{y^s-y_r}{\rho_r^s} & -\frac{z^s-z_r}{\rho_r^s} & 0 & 1 & 0 & 1 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots
\end{array}\right] \\
&= 
\left[\begin{array}{cccccccccc}
  -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots \\
  \hdashline
  -\frac{\mathbf{v}_x^s-\mathbf{v}_{r, x}}{\rho_r^s} & -\frac{\mathbf{v}_y^s-\mathbf{v}_{r, y}}{\rho_r^s} & -\frac{\mathbf{v}_z^s-\mathbf{v}_{r, z}}{\rho_r^s} & -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 1 & 0 & 0 \\
  -\frac{\mathbf{v}_x^s-\mathbf{v}_{r, x}^s}{\rho_r^s} & -\frac{\mathbf{v}_y^s-\mathbf{v}_{r, y}^s}{\rho_r^s} & -\frac{\mathbf{v}_z^s-\mathbf{v}_{r_r}^s}{\rho_r^s} & -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 1 & 0 & 1 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots
\end{array}\right] \\
&\approx
\left[\begin{array}{cccccccccc}
  -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 0 & 0 & 1 & 0 & 1 & 0 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots \\
  \hdashline
  0 & 0 & 0 & -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 1 & 0 & 0 \\
  0 & 0 & 0 & -u_{rs,x} & -u_{rs,y} & -u_{rs,z} & 0 & 1 & 0 & 1 \\
  \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots & \ldots
\end{array}\right]
\end{aligned}
\f}

(\cite Groves2013 Groves, ch. 9.4.2.2, eq. 9.163, p. 420)

\subsection SppKF-measurmentModel-measurementNoise Measurement noise covariance matrix
See \ref GNSS-MeasErrorModel

<!-- --------------------------------------------------------------------------------------------------------------- -->
\section SppKF-init Initialization
<!-- --------------------------------------------------------------------------------------------------------------- -->

- State \f$ x \f$: from Single Point Positioning solution using weighted Least-squares estimation
- Covariance matrix of state \f$ P \f$: 
  - if more observations than unknowns: SPP solution using LSE
  - otherwise: GUI input

*/

}