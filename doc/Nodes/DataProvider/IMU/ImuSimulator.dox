namespace Instinct {

/** \defgroup ImuSimulator IMU Simulator

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\section ImuSimulator-Acceleration-Measurements Acceleration Measurements

The navigation equation for a local-navigation frame is (see \cite Titterton2004 Titterton, ch. 3.7.1, eq. 3.69, p. 47f)
\fl{equation,eq-ImuSimulator-VelocityNav-equation-pre}
  \boldsymbol{\dot{v}}^n = \boldsymbol{f}^n - \underbrace{(2 \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n) \times \boldsymbol{v}^n}_{\text{coriolis acceleration}} +\ \mathbf{g}_l^n
\f}
where
- \f$ \boldsymbol{v}^n = \begin{pmatrix} v_N & v_E & v_D \end{pmatrix}^T \f$ is the velocity with respect to the Earth in local-navigation frame coordinates,
- \f$ \boldsymbol{f}^n = \begin{pmatrix} f_N & f_E & f_D \end{pmatrix}^T \f$ is the specific force vector as measured by a triad of accelerometers and resolved into local-navigation frame coordinates
- \f$ \boldsymbol{\omega}_{ie}^n \f$ is the turn rate of the Earth expressed in local-navigation frame coordinates
- \f$ \boldsymbol{\omega}_{en}^n \f$ is the turn rate of the local frame with respect to the Earth-fixed frame, called the transport rate, expressed in local-navigation frame coordinates
- \f$ \mathbf{g}_l^n \f$ is the local gravity vector which is a combination of (see \cite Titterton2004 Titterton, ch. 3.71, eq. 3.75, p. 48)
    - \f$ \mathbf{g}^n \f$ the local gravitation vector (caused by effects of mass attraction)
    - \f$ \boldsymbol{\omega}_{ie}^e \times [ \boldsymbol{\omega}_{ie}^e \times \mathbf{x}^e ] \f$ the centrifugal acceleration caused by the Earth's rotation

Therefore equation \eqref{eq-ImuSimulator-VelocityNav-equation-pre} becomes
\fl{equation,eq-ImuSimulator-VelocityNav-equation}
  \underbrace{\boldsymbol{\dot{v}}^n}_{\hidewidth\text{trajectory}\hidewidth}
      = \overbrace{\boldsymbol{f}^n}^{\hidewidth\text{measured}\hidewidth}
        -\ \underbrace{(2 \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n) \times \boldsymbol{v}^n}_{\text{coriolis acceleration}}
        +\ \overbrace{\mathbf{g}^n}^{\hidewidth\text{gravitation}\hidewidth}
        -\ \mathbf{C}_e^n \cdot \underbrace{\left(\boldsymbol{\omega}_{ie}^e \times [ \boldsymbol{\omega}_{ie}^e \times \mathbf{x}^e ] \right)}_{\text{centrifugal acceleration}}
\f}

which can be reordered to calculate the measured accelerations with
\fl{equation,eq-ImuSimulator-acceleration-measured}
  \underbrace{\boldsymbol{f}^n}_{\hidewidth\text{measured}\hidewidth}
      = \overbrace{\boldsymbol{\dot{v}}^n}^{\hidewidth\text{trajectory}\hidewidth}
        + \underbrace{(2 \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n) \times \boldsymbol{v}^n}_{\text{coriolis acceleration}}
        -\ \overbrace{\mathbf{g}^n}^{\hidewidth\text{gravitation}\hidewidth}
        +\ \mathbf{C}_e^n \cdot \underbrace{\left(\boldsymbol{\omega}_{ie}^e \times [ \boldsymbol{\omega}_{ie}^e \times \mathbf{x}^e ] \right)}_{\text{centrifugal acceleration}}
\f}

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\section ImuSimulator-Trajectory Trajectory calculation

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\subsection ImuSimulator-Trajectory-Fixed Fixed

The fixed trajectory describes a geostationary position on Earth.

#### Position
\fl{equation,eq-ImuSimulator-Trajectory-Fixed-position}
  \mathbf{x}^n = \begin{pmatrix} \phi & \lambda & h \end{pmatrix}^T = \text{const}
\f}

#### Velocity
\fl{equation,eq-ImuSimulator-Trajectory-Fixed-velocity}
  \boldsymbol{v}^n = \mathbf{\dot{x}}^n = 0
\f}

#### Acceleration
\fl{equation,eq-ImuSimulator-Trajectory-Fixed-acceleration}
  \mathbf{a}^n = \boldsymbol{\dot{v}}^n = 0
\f}

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\subsection ImuSimulator-Trajectory-Linear Linear

The linear trajectory describes a vehicle moving with constant velocity in local-navigation coordinates.

#### Position

The time derivative of the curvilinear position (lat, lon, alt) is given by (\cite Groves2013 Groves, ch. 2.4.2, eq. 2.111, p. 61 or \cite Titterton2004 Titterton, ch. 3.7, eq. 3.81,3.85,3.86, p. 48ff)

\fl{equation,eq-ImuSimulator-Trajectory-Linear-curvilinearPositionDerivative}
\begin{aligned}
  \dotup{\phi}    &= \frac{v_N}{R_N + h} \\
  \dotup{\lambda} &= \frac{v_E}{(R_E + h) \cos{\phi}} \\
  \dotup{h}       &= -v_D
\end{aligned}
\f}

As the velocity in local-navigation coordinates is constant and neglecting the change in non velocity terms, the position can be expressed as

\fl{equation,eq-ImuSimulator-Trajectory-Linear-position}
  \renewcommand*{\arraystretch}{2.0}
  \mathbf{x}^n =
  \begin{pmatrix} \phi \\ \lambda \\ h \end{pmatrix}
  \approx \begin{pmatrix} \phi_0 \\ \lambda_0 \\ h_0 \end{pmatrix}
  + \begin{pmatrix} \dfrac{v_N}{R_N + h} \\ \dfrac{v_E}{(R_E + h) \cos{\phi}} \\  -v_D \end{pmatrix}
  \cdot t
\f}

#### Velocity
\fl{equation,eq-ImuSimulator-Trajectory-Linear-velocity}
\boldsymbol{v}^n = \mathbf{\dot{x}}^n = const
\f}

#### Acceleration
\fl{equation,eq-ImuSimulator-Trajectory-Linear-acceleration}
  \mathbf{a}^n = \boldsymbol{\dot{v}}^n = 0
\f}

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\subsection ImuSimulator-Trajectory-Circular Circular/Helical

The circular or helical trajectory describes a vehicle moving with constant horizontal speed on a circular shaped path.
\fl{equation,eq-ImuSimulator-Trajectory-Circular-horizontal-speed}
\begin{aligned}
  \left|\boldsymbol{v}_{\text{h}}^n\right| &= \text{const}
\end{aligned}
\f}
The vertical velocity is
- for the circular trajectory: \f$ v_D = 0 \f$
- for the helical trajectory: \f$ v_D = \text{const} \f$

#### Position
In the local-navigation frame in a tangential plane to the Earth surface a circular path can be expressed as

\fl{equation,eq-ImuSimulator-Trajectory-Circular-local-position-phi}
  \mathbf{x}^n = \begin{pmatrix} x_N \\ x_E \end{pmatrix}
               = \mathbf{x}_M^n
                 + \begin{pmatrix} r \cdot \sin{\left( \varphi \cdot \text{dir} + \varphi_0 \right)} \\
                                   r \cdot \cos{\left( \varphi \cdot \text{dir} + \varphi_0 \right)}
                   \end{pmatrix}
\f}
where \f$ x_M \f$ is the center of the circle, \f$ \varphi_0 \f$ is the starting angle and \f$ \text{dir} \f$ is a sign (-1 for CW and +1 for CCW) determining the direction of the circle.

The vertical position in case of a helical trajectory is \f$ x_D = x_{M,D} + v_D \cdot t \f$.

The variable \f$ \varphi \f$ can be expressed due to the constant speed
\fl{equation,eq-ImuSimulator-Trajectory-Circular-phi}
  \left|\boldsymbol{v}_{\text{h}}^n\right| = \frac{s}{t}
                                = \left( \frac{\varphi}{2\pi} \cdot U \right) \frac{1}{t}
                                = \left( \frac{\varphi}{2\pi} \cdot 2\pi r \right) \frac{1}{t}
                                = \frac{\varphi \cdot r}{t}
\f}

which leads to
\fl{equation,eq-ImuSimulator-Trajectory-Circular-local-position}
\begin{aligned}
  x_N &= x_{M,N} + r \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \frac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
  x_E &= x_{M,E} + r \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \frac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
  x_D &= x_{M,D} + v_D \cdot t \\
\end{aligned}
\f}

This can then be added to the start position after rotating it into the Earth frame

\fl{equation,eq-ImuSimulator-Trajectory-Circular-position}
  \renewcommand*{\arraystretch}{2.0}
  \mathbf{x}^e = \mathbf{x}_M^e + \mathbf{C}_n^e(\mathbf{x}_M) \cdot \begin{pmatrix} r \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                       r \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                       v_D \cdot t \end{pmatrix}
\f}
which can the be converted into latitude, longitude and altitude.

#### Velocity
The velocity can be derived in the Earth frame as
\fl{equation,eq-ImuSimulator-Trajectory-Circular-velocity_e}
\begin{aligned}
  \renewcommand*{\arraystretch}{2.0}
  \mathbf{\dot{x}}^e = \mathbf{v}^e &= \overbrace{\mathbf{\dot{C}}_n^e(\mathbf{x}_M)}^{= 0}
                                         \cdot \begin{pmatrix} r \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                               r \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                               v_D \cdot t \end{pmatrix}
                                       + \mathbf{C}_n^e(\mathbf{x}_M)
                                           \cdot \frac{\partial}{\partial t} \begin{pmatrix} r \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                                             r \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                                             v_D \cdot t \end{pmatrix} \\
                                    &= \mathbf{C}_n^e(\mathbf{x}_M)
                                         \cdot \begin{pmatrix} \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \text{dir} \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                               -\left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \text{dir} \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                               v_D \end{pmatrix}
\end{aligned}
\f}
With the current position on the circle (not the middle point) we can convert it to the local-navigation frame:
\fl{equation,eq-ImuSimulator-Trajectory-Circular-velocity_n}
  \mathbf{v}^n = \mathbf{C}_e^n \cdot \mathbf{v}^e
\f}

#### Acceleration
The acceleration can be derived from the Earth frame as
\fl{equation,eq-ImuSimulator-Trajectory-Circular-acceleration_e}
\begin{aligned}
  \renewcommand*{\arraystretch}{2.0}
  \mathbf{\ddot{x}}^e = \mathbf{a}^e &= \mathbf{C}_n^e(\mathbf{x}_M)
                                          \cdot \begin{pmatrix} \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{1}{r} \cdot \text{dir}^2 \cdot -\sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                -\left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{1}{r} \cdot \text{dir}^2 \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                0 \end{pmatrix} \\
                                     &= \mathbf{C}_n^e(\mathbf{x}_M)
                                          \cdot \begin{pmatrix} -\dfrac{\left|\boldsymbol{v}_{\text{h}}^n\right|^2}{r} \cdot \sin{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                -\dfrac{\left|\boldsymbol{v}_{\text{h}}^n\right|^2}{r} \cdot \cos{\left( \left|\boldsymbol{v}_{\text{h}}^n\right| \cdot \dfrac{t}{r} \cdot \text{dir} + \varphi_0 \right)} \\
                                                                0 \end{pmatrix}
\end{aligned}
\f}
With the current position on the circle (not the middle point) we can convert it to the local-navigation frame:
\fl{equation,eq-ImuSimulator-Trajectory-Circular-acceleration_n}
  \mathbf{a}^n = \mathbf{C}_e^n \cdot \mathbf{a}^e
\f}

<!-- --------------------------------------------------------------------------------------------------------------------------------------------- -->
\section ImuSimulator-AngularRate-Measurements Angular Rate Measurements

Gyroscopes measure the turn rate of the platform frame with respect to an inertial frame expressed in platform coordinates
\fl{equation,eq-ImuSimulator-GyroMeas}
\begin{aligned}
  \boldsymbol{\omega}_{ip}^p &= \boldsymbol{\omega}_{in}^p + \boldsymbol{\omega}_{np}^p \\
                             &= \mathbf{C}_n^p \cdot [ \boldsymbol{\omega}_{in}^n + \boldsymbol{\omega}_{np}^n ] \\
                             &= \mathbf{C}_n^p \cdot [ ( \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n ) + ( \boldsymbol{\omega}_{nb}^n + \overbrace{\boldsymbol{\omega}_{bp}^n}^{= 0} ) ] \\
                             &= \mathbf{C}_n^p \cdot [ \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n + \boldsymbol{\omega}_{nb}^n ] \\
                             &= \mathbf{C}_n^p \cdot [ \boldsymbol{\omega}_{ie}^n + \boldsymbol{\omega}_{en}^n + \mathbf{C}_b^n \boldsymbol{\omega}_{nb}^b ]
\end{aligned}
\f}

The turn rate of the body frame with respect to the local-navigation frame expressed in body coordinates depends on the time derivation of the gimbal angles \f$ \phi \f$ (roll), \f$ \theta \f$ (pitch), \f$ \psi \f$ (yaw):
\fl{equation,eq-ImuSimulator-omega_nb_b}
  \boldsymbol{\omega}_{nb}^b
      = \begin{bmatrix} \dotup{R} \\ 0 \\ 0 \end{bmatrix}
        + \mathbf{C_3} \begin{bmatrix} 0 \\ \dotup{P} \\ 0 \end{bmatrix}
        + \mathbf{C_3} \mathbf{C_2} \begin{bmatrix} 0 \\ 0 \\ \dotup{Y} \end{bmatrix}
\f}
where
- \f$ \mathbf{C_3} = \begin{bmatrix} 1 &     0    &    0    \\
                                     0 &  \cos{R} & \sin{R} \\
                                     0 & -\sin{R} & \cos{R} \end{bmatrix} \f$
  is the rotation \f$ R \f$ about the x-axis (see \cite Titterton2004 Titterton, ch. 3.6.3.2, eq. 3.46, p. 41)
- \f$ \mathbf{C_2} = \begin{bmatrix} \cos{P} & 0 & -\sin{P} \\
                                        0    & 1 &     0    \\
                                     \sin{P} & 0 &  \cos{P} \end{bmatrix} \f$
  is the rotation \f$ P \f$ about the y-axis (see \cite Titterton2004 Titterton, ch. 3.6.3.2, eq. 3.45, p. 41)

see
- \cite Titterton2004 Titterton, ch. 3.6.3.3, eq. 3.52, p. 42
- \cite Gleason2009 Gleason, ch. 6.2.3.1, eq. 6.7, p. 153 (top left term in eq. 6.8 should be \f$ \cos{\theta} \f$ instead of \f$ 1 \f$)

Now we have to find the time derivative of the gimbal angles.

#### Roll rate
The roll angle is either zero or can be chosen to a constant value when simulating a fixed point. Therefore the roll rate is always
\fl{equation,eq-ImuSimulator-roll-rate}
  \dotup{R} = 0
\f}

#### Yaw rate
The yaw angle can be expressed as
\fl{equation,eq-ImuSimulator-yaw}
  Y = \tan^{-1}\left(\frac{v_E}{v_N}\right)
\f}

The yaw rate can then be found then as
\fl{equation,eq-ImuSimulator-yaw-rate}
\begin{aligned}
  \dotup{Y} &= \dfrac{\partial}{\partial t} \left(\dfrac{v_E}{v_N}\right) \cdot \frac{1}{\left(\dfrac{v_E}{v_N}\right)^2 + 1} \\
            &= \dfrac{\dotup{v}_E \cdot v_N - v_E \cdot \dotup{v}_N}{v_N^2} \cdot \frac{1}{\left(\dfrac{v_E}{v_N}\right)^2 + 1} \\
            &= \dfrac{a_E \cdot v_N - v_E \cdot a_N}{v_E^2 + v_N^2} \\
\end{aligned}
\f}

#### Pitch rate
The pitch angle can be expressed as
\fl{equation,eq-ImuSimulator-pitch}
  P = \tan^{-1}\left(\frac{-v_D}{\sqrt{v_N^2 + v_E^2}}\right)
\f}

The pitch rate can then be found then as
\fl{equation,eq-ImuSimulator-pitch-rate}
\begin{aligned}
  \dotup{P} &= \dfrac{\partial}{\partial t} \left(\dfrac{-v_D}{\sqrt{v_N^2 + v_E^2}}\right) \cdot \frac{1}{\left(\dfrac{-v_D}{\sqrt{v_N^2 + v_E^2}}\right)^2 + 1} \\
            &= \dfrac{-\dotup{v}_D \cdot \sqrt{v_N^2 + v_E^2} + v_D \cdot \dfrac{1}{2} \left(2 \dotup{v}_N v_N + 2 \dotup{v}_E v_E \right) \dfrac{1}{\sqrt{v_N^2 + v_E^2}} }{v_N^2 + v_E^2} \cdot \frac{1}{\left(\dfrac{-v_D}{\sqrt{v_N^2 + v_E^2}}\right)^2 + 1} \\
            &= \dfrac{-a_D \cdot \sqrt{v_N^2 + v_E^2} + v_D \cdot \left(a_N v_N + a_E v_E \right) \dfrac{1}{\sqrt{v_N^2 + v_E^2}} }{v_D^2 + v_N^2 + v_E^2} \\
\end{aligned}
\f}

*/

}
